"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Utils_1 = require("../../common/Utils");
const XMPPUtils_1 = require("../../common/XMPPUtils");
const ErrorManager_1 = require("../../common/ErrorManager");
const S2SServiceEventHandler_1 = require("./S2SServiceEventHandler");
const express = require("express");
const LOG_ID = "S2S - ";
let S2SService = class S2SService {
    constructor(_s2s, _im, _application, _eventEmitter, _logger, _proxy) {
        this.serverURL = ""; //_s2s.protocol + "://" + _s2s.host + ":" + _s2s.port + "/websocket";
        this.hostCallback = _s2s.hostCallback;
        this.locallistenningport = _s2s.locallistenningport;
        this.eventEmitter = _eventEmitter;
        this.version = "0.1";
        this.jid_im = "";
        this.jid_tel = "";
        this.jid_password = "";
        this.fullJid = "";
        this.jid = "";
        this.userId = "";
        //        this.initialPresence = true;
        //        this.xmppClient = null;
        this.logger = _logger;
        this.proxy = _proxy;
        this.useS2S = false;
        /*
        this.shouldSendMessageToConnectedUser = _im.sendMessageToConnectedUser;
        this.storeMessages = _im.storeMessages;
        this.copyMessage = _im.copyMessage;
        this.rateLimitPerHour = _im.rateLimitPerHour;
        this.messagesDataStore = _im.messagesDataStore;
        this.useXMPP = true;
        this.timeBetweenXmppRequests = _xmpp.timeBetweenXmppRequests;
        this.isReconnecting = false;
        this.maxAttempts = 1;
        this.idleTimer = null;
        this.pingTimer = null;
        this.forceClose = false;
        this.applicationId = _application.appID;
// */
        this.xmppUtils = XMPPUtils_1.XMPPUTils.getXMPPUtils();
        this.generatedRandomId = this.xmppUtils.generateRandomID();
        this.hash = Utils_1.makeId(8);
        this.s2sEventHandler = new S2SServiceEventHandler_1.S2SServiceEventHandler(_im, _application, _eventEmitter, _logger, _s2s.hostCallback);
        this.eventEmitter.on("evt_internal_ons2sready", this.onS2SReady.bind(this));
        this.app = express();
        this.logger.log("internal", LOG_ID + "(S2SService) ", this.logger.colors.yellow("S2SService contructor."));
    }
    start(_options, _core) {
        let that = this;
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                that.options = _options;
                that.useS2S = that.options.useS2S;
                that._rest = _core._rest;
                that._contacts = _core._contacts;
                that._conversations = _core._conversations;
                yield that.s2sEventHandler.start(_core);
                if (that.useS2S) {
                    that.logger.log("debug", LOG_ID + "(start) S2S hostCallback used : ", that.hostCallback, ", on locallistenningport : ", that.locallistenningport);
                    //that.logger.log("info", LOG_ID + "(start) S2S URL : ", that.serverUR);
                }
                else {
                    that.logger.log("info", LOG_ID + "(start) S2S connection blocked by configuration");
                    return resolve();
                }
                that.app.use(express.json());
                that.app.listen(that.locallistenningport, function () {
                    that.logger.log("debug", LOG_ID + "Server is running on " + that.locallistenningport + " port");
                });
                /* that.app.post( "/message", (req, res ) => {
                         // console.log( "received a message")
                         // console.log( req.body )
                         // console.log( req.body.message.conversation_id )
                         sendMessageToConv(req.body.message.conversation_id, "J'ai bien recu ton message :" + req.body.message.body )
                         res.send("<html></html>");
                     }
                 ) // */
                that.app.all('*', (req, res) => __awaiter(this, void 0, void 0, function* () {
                    res.send('<h1>Hello World!</h1>');
                    that.logger.log("internal", LOG_ID + "*************************************************");
                    that.logger.log("internal", LOG_ID + "received an event: ");
                    that.logger.log("internal", LOG_ID + "METHOD : ", req.method);
                    that.logger.log("internal", LOG_ID + "BASELURL : ", req.baseUrl);
                    that.logger.log("internal", LOG_ID + "ORIGINALURL : ", req.originalUrl);
                    that.logger.log("internal", LOG_ID + "BODY : ", req.body);
                    that.logger.log("internal", LOG_ID + "*************************************************");
                    let body = req.body;
                    that.s2sEventHandler.handleS2SEvent(req);
                }));
                resolve();
            }
            catch (err) {
                return reject(err);
            }
        }));
    }
    signin(account, headers) {
        let that = this;
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            that.jid_im = account.jid_im;
            that.jid_tel = account.jid_tel;
            that.jid_password = account.jid_password;
            that.userId = account.id;
            that.fullJid = that.xmppUtils.generateRandomFullJidForNode(that.jid_im, that.generatedRandomId);
            that.jid = account.jid_im;
            that.logger.log("internal", LOG_ID + "(signin) account used, jid_im : ", that.jid_im, ", fullJid : ", that.fullJid);
            yield that.deleteAllConnectionsS2S();
            this.s2sEventHandler.setAccount(account);
            resolve(yield that.loginS2S(that.hostCallback));
        }));
    }
    stop(forceStop = false) {
        let that = this;
        return new Promise(function (resolve) {
            that.jid_im = "";
            that.jid_tel = "";
            that.jid_password = "";
            that.fullJid = "";
            that.userId = "";
            if (that.useS2S || forceStop) {
                resolve(that.deleteAllConnectionsS2S());
            }
            else {
                resolve();
            }
        });
    }
    listConnectionsS2S() {
        let that = this;
        that.logger.log("internal", LOG_ID + "(listConnectionsS2S) will get all the cnx S2S");
        return that._rest.listConnectionsS2S()
            .then(response => {
            that.logger.log("debug", LOG_ID + "(listConnectionsS2S) worked.");
            //console.log( response.data )
            //connectionInfo = response.data.data
            that.logger.log("internal", LOG_ID + "(listConnectionsS2S) connexions S2S : ", response);
            return response;
        });
    }
    sendS2SPresence(obj) {
        let that = this;
        that.logger.log("internal", LOG_ID + "(sendS2SPresence) set S2S presence : ", obj);
        return that._rest.sendS2SPresence(obj)
            .then(response => {
            that.logger.log("internal", LOG_ID + "(sendS2SPresence) worked.");
            //console.log( response.data )
            //connectionInfo = response.data.data
            that.logger.log("internal", LOG_ID + "(sendS2SPresence) connexions S2S : ", response);
            return response;
        });
    }
    deleteConnectionsS2S(connexions) {
        let that = this;
        that.logger.log("debug", LOG_ID + "(deleteConnectionsS2S) will del cnx S2S.");
        that.logger.log("info", LOG_ID + "(deleteConnectionsS2S) will del cnx S2S : ", connexions);
        if (!connexions && !Array.isArray(connexions)) {
            that.logger.log("warn", LOG_ID + "(deleteConnectionsS2S) bad or empty 'connexions' parameter");
            that.logger.log("internalerror", LOG_ID + "(deleteConnectionsS2S) bad or empty 'connexions' parameter : ", connexions);
            return Promise.reject(ErrorManager_1.ErrorManager.getErrorManager().BAD_REQUEST);
        }
        const requests = [];
        return that._rest.deleteConnectionsS2S(connexions)
            .then(response => {
            that.logger.log("debug", LOG_ID + "(deleteConnectionsS2S) worked");
            //console.log( response.data )
            //connectionInfo = response.data.data
            that.logger.log("internal", LOG_ID + "(deleteConnectionsS2S) connexions S2S: ", response);
            return response;
        });
    }
    deleteAllConnectionsS2S() {
        let that = this;
        that.logger.log("internal", LOG_ID + "(deleteAllConnectionsS2S) ");
        return that.listConnectionsS2S().then(response => {
            that.logger.log("debug", LOG_ID + "(deleteAllConnectionsS2S) listConnectionsS2S worked.");
            that.logger.log("internal", LOG_ID + "(deleteAllConnectionsS2S) listConnectionsS2S result : ", response);
            return that.deleteConnectionsS2S(response);
        });
    }
    loginS2S(callback_url) {
        let that = this;
        let data = { connection: { /*resource: "s2s_machin",*/ callback_url } };
        that.logger.log("debug", LOG_ID + "(loginS2S) will login  S2S.");
        that.logger.log("internal", LOG_ID + "(loginS2S) will login S2S : ", data);
        return that._rest.loginS2S(callback_url)
            .then((response) => {
            that.logger.log("debug", LOG_ID + "(loginS2S)  worked");
            //console.log( response.data )
            //connectionInfo = response.data.data
            that.logger.log("internal", LOG_ID + "(loginS2S) connexions S2S : ", response);
            return Promise.resolve(response.data);
        });
    }
    infoS2S(s2sConnectionId) {
        let that = this;
        that.logger.log("debug", LOG_ID + "(infoS2S)  will get info S2S");
        that.logger.log("internal", LOG_ID + "(infoS2S) will get info S2S");
        return that._rest.infoS2S(s2sConnectionId)
            .then(response => {
            that.logger.log("debug", LOG_ID + "(infoS2S) worked.");
            //console.log( response.data )
            //connectionInfo = response.data.data
            that.logger.log("internal", LOG_ID + "(infoS2S) S2S: ", response);
            return response;
        });
    }
    // */
    /** S2S EVENTS */
    onS2SReady(event) {
        return __awaiter(this, void 0, void 0, function* () {
            let that = this;
            that.logger.log("internal", LOG_ID + "(onS2SReady) S2S READY ENVENT: ", event);
            yield this._rest.setS2SConnection(event.id);
        });
    }
    /** S2S methods */
    sendMessageInConversation(conversationId, msg) {
        let that = this;
        that.logger.log("internal", LOG_ID + "(sendMessageInConversation) will send msg S2S : ", msg, " in conv id : ", conversationId);
        return that._rest.sendS2SMessageInConversation(conversationId, msg).then(response => {
            that.logger.log("debug", LOG_ID + "(sendMessageInConversation) worked.");
            //console.log( response.data )
            //connectionInfo = response.data.data
            that.logger.log("internal", LOG_ID + "(sendMessageInConversation) S2S response : ", response);
            return response;
        });
    }
    joinRoom(bubbleId) {
        let that = this;
        that.logger.log("internal", LOG_ID + "(joinRoom) will send presence to joinRoom S2S, bubbleId : ", bubbleId);
        return that._rest.joinS2SRoom(bubbleId).then(response => {
            that.logger.log("debug", LOG_ID + "(joinRoom) worked.");
            //console.log( response.data )
            //connectionInfo = response.data.data
            that.logger.log("internal", LOG_ID + "(joinRoom) S2S response : ", response);
            return response;
        });
    }
};
S2SService = __decorate([
    Utils_1.logEntryExit(LOG_ID)
], S2SService);
exports.S2SService = S2SService;
module.exports.S2SService = S2SService;
//# sourceMappingURL=S2SService.js.map